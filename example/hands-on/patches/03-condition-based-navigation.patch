diff --git a/src/App.tsx b/src/App.tsx
index d697d1c..2fd4976 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,4 +1,5 @@
 import {NavigationContainer} from '@react-navigation/native';
+import {UserContextProvider} from 'contexts/UserContext';
 import {RootStackNav} from 'navigation';
 import React from 'react';
 import {StyleSheet} from 'react-native';
@@ -7,9 +8,11 @@ import {GestureHandlerRootView} from 'react-native-gesture-handler';
 export const App = () => {
   return (
     <GestureHandlerRootView style={StyleSheet.absoluteFill}>
-      <NavigationContainer>
-        <RootStackNav />
-      </NavigationContainer>
+      <UserContextProvider>
+        <NavigationContainer>
+          <RootStackNav />
+        </NavigationContainer>
+      </UserContextProvider>
     </GestureHandlerRootView>
   );
 };
diff --git a/src/contexts/UserContext.tsx b/src/contexts/UserContext.tsx
new file mode 100644
index 0000000..50904ff
--- /dev/null
+++ b/src/contexts/UserContext.tsx
@@ -0,0 +1,42 @@
+import React, {useContext, useState} from 'react';
+import {AuthService} from 'services/AuthService';
+
+export class AccountConflictError {}
+
+export class AuthenticationFailedError {}
+
+interface ContextValueType {
+  signup: (userName: string, password: string) => Promise<void | AccountConflictError>;
+  login: (userName: string, password: string) => Promise<void | AuthenticationFailedError>;
+  logout: () => Promise<void>;
+  userName: string;
+  isLoggedIn: boolean;
+}
+
+export const UserContext = React.createContext<ContextValueType>({} as ContextValueType);
+
+export const useUserContext = () => useContext(UserContext);
+
+export const UserContextProvider: React.FC<React.PropsWithChildren> = ({children}) => {
+  const [userName, setUserName] = useState<string>('');
+
+  const contextValue: ContextValueType = {
+    signup: async (userName, password) => {
+      await AuthService.signup(userName, password);
+    },
+    login: async (userName, password) => {
+      await AuthService.login(userName, password);
+      await AuthService.refreshCsrfToken();
+      setUserName(userName);
+    },
+    logout: async () => {
+      await AuthService.logout();
+      await AuthService.refreshCsrfToken();
+      setUserName('');
+    },
+    userName,
+    isLoggedIn: userName !== '',
+  };
+
+  return <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>;
+};
diff --git a/src/navigation/AuthedStackNav.tsx b/src/navigation/AuthedStackNav.tsx
new file mode 100644
index 0000000..1d06db8
--- /dev/null
+++ b/src/navigation/AuthedStackNav.tsx
@@ -0,0 +1,12 @@
+import {createStackNavigator} from '@react-navigation/stack';
+import React from 'react';
+import {TodoBoard} from 'screens';
+
+const nav = createStackNavigator();
+export const AuthedStackNav: React.FC = () => {
+  return (
+    <nav.Navigator screenOptions={{headerShown: false}}>
+      <nav.Screen name="Todo" component={TodoBoard} />
+    </nav.Navigator>
+  );
+};
diff --git a/src/navigation/RootStackNav.tsx b/src/navigation/RootStackNav.tsx
index dd63ae6..5af6fcf 100644
--- a/src/navigation/RootStackNav.tsx
+++ b/src/navigation/RootStackNav.tsx
@@ -1,46 +1,20 @@
-import {useNavigation} from '@react-navigation/native';
 import {createStackNavigator} from '@react-navigation/stack';
+import {useUserContext} from 'contexts/UserContext';
 import React from 'react';
-import {Button} from 'react-native-elements';
-import {Welcome, Instructions, Login, TodoBoard} from 'screens';
 
-const HeaderRight: React.FC = () => {
-  const navigation = useNavigation();
-  return <Button type="clear" onPress={() => navigation.navigate('Login')} title="ログイン" />;
-};
+import {AuthedStackNav} from './AuthedStackNav';
+import {UnauthedStackNav} from './UnauthedStackNav';
 
-const nav = createStackNavigator();
+const rootNav = createStackNavigator();
 export const RootStackNav: React.FC = () => {
+  const userContext = useUserContext();
   return (
-    <nav.Navigator
-      initialRouteName={Welcome.name}
-      screenOptions={{
-        headerRight: () => <HeaderRight />,
-      }}>
-      <nav.Screen
-        name="Welcome"
-        component={Welcome}
-        options={{
-          headerTitle: 'Welcome',
-        }}
-      />
-      <nav.Screen
-        name="Login"
-        component={Login}
-        options={{
-          headerTitle: 'ログイン',
-          headerRight: undefined,
-        }}
-      />
-      <nav.Screen
-        name="TodoBoard"
-        component={TodoBoard}
-        options={{
-          headerTitle: 'Todo',
-          headerRight: undefined,
-        }}
-      />
-      <nav.Screen name="Instructions" component={Instructions} />
-    </nav.Navigator>
+    <rootNav.Navigator screenOptions={{headerShown: false}}>
+      {userContext.isLoggedIn ? (
+        <rootNav.Screen name="Authed" component={AuthedStackNav} />
+      ) : (
+        <rootNav.Screen name="Unauthed" component={UnauthedStackNav} />
+      )}
+    </rootNav.Navigator>
   );
 };
diff --git a/src/navigation/UnauthedStackNav.tsx b/src/navigation/UnauthedStackNav.tsx
new file mode 100644
index 0000000..d22bfd6
--- /dev/null
+++ b/src/navigation/UnauthedStackNav.tsx
@@ -0,0 +1,38 @@
+import {useNavigation} from '@react-navigation/native';
+import {createStackNavigator} from '@react-navigation/stack';
+import React from 'react';
+import {Button} from 'react-native-elements';
+import {Welcome, Instructions, Login} from 'screens';
+
+const HeaderRight: React.FC = () => {
+  const navigation = useNavigation();
+  return <Button type="clear" onPress={() => navigation.navigate('Login')} title="ログイン" />;
+};
+
+const nav = createStackNavigator();
+export const UnauthedStackNav: React.FC = () => {
+  return (
+    <nav.Navigator
+      initialRouteName={Welcome.name}
+      screenOptions={{
+        headerRight: () => <HeaderRight />,
+      }}>
+      <nav.Screen
+        name="Welcome"
+        component={Welcome}
+        options={{
+          headerTitle: 'Welcome',
+        }}
+      />
+      <nav.Screen
+        name="Login"
+        component={Login}
+        options={{
+          headerTitle: 'ログイン',
+          headerRight: undefined,
+        }}
+      />
+      <nav.Screen name="Instructions" component={Instructions} />
+    </nav.Navigator>
+  );
+};
diff --git a/src/navigation/index.ts b/src/navigation/index.ts
index 7e4db67..9f57181 100644
--- a/src/navigation/index.ts
+++ b/src/navigation/index.ts
@@ -1 +1,3 @@
 export * from './RootStackNav';
+export * from './UnauthedStackNav';
+export * from './AuthedStackNav';
diff --git a/src/screens/auth/Login.tsx b/src/screens/auth/Login.tsx
index 7dd7160..242be0d 100644
--- a/src/screens/auth/Login.tsx
+++ b/src/screens/auth/Login.tsx
@@ -1,14 +1,20 @@
-import {useNavigation} from '@react-navigation/native';
-import React from 'react';
+import {useUserContext} from 'contexts/UserContext';
+import React, {useCallback} from 'react';
 import {StyleSheet, View} from 'react-native';
 import {Text, Button} from 'react-native-elements';
 
 export const Login: React.FC = () => {
-  const navigation = useNavigation();
+  const userContext = useUserContext();
+
+  const login = useCallback(() => {
+    // 後で例外処理を追加するので、今はlintのエラーは無視してください。
+    userContext.login('user', 'password');
+  }, [userContext]);
+
   return (
     <View style={styles.container}>
       <Text h1>ログイン</Text>
-      <Button onPress={() => navigation.navigate('TodoBoard')} title="ログイン" />
+      <Button onPress={login} title="ログイン" />
     </View>
   );
 };
diff --git a/src/screens/todo/TodoBoard.tsx b/src/screens/todo/TodoBoard.tsx
index 7555435..caacb08 100644
--- a/src/screens/todo/TodoBoard.tsx
+++ b/src/screens/todo/TodoBoard.tsx
@@ -1,11 +1,17 @@
-import React from 'react';
+import {useUserContext} from 'contexts/UserContext';
+import React, {useCallback} from 'react';
 import {StyleSheet, View} from 'react-native';
-import {Text} from 'react-native-elements';
+import {Text, Button} from 'react-native-elements';
 
 export const TodoBoard: React.FC = () => {
+  const userContext = useUserContext();
+
+  const onLogout = useCallback(() => userContext.logout(), [userContext]);
+
   return (
     <View style={styles.container}>
       <Text h1>Todo</Text>
+      <Button type="clear" onPress={onLogout} title="ログアウト" />
     </View>
   );
 };
diff --git a/src/services/AuthService.ts b/src/services/AuthService.ts
new file mode 100644
index 0000000..a6e9454
--- /dev/null
+++ b/src/services/AuthService.ts
@@ -0,0 +1,20 @@
+const refreshCsrfToken = async () => {};
+
+const signup = async (userName: string, password: string) => {
+  return Promise.resolve();
+};
+
+const login = async (userName: string, password: string) => {
+  return Promise.resolve();
+};
+
+const logout = async () => {
+  return Promise.resolve();
+};
+
+export const AuthService = {
+  signup,
+  login,
+  logout,
+  refreshCsrfToken,
+};
diff --git a/src/services/index.ts b/src/services/index.ts
new file mode 100644
index 0000000..af1ad50
--- /dev/null
+++ b/src/services/index.ts
@@ -0,0 +1 @@
+export * from './AuthService';
