diff --git a/src/components/parts/index.ts b/src/components/parts/index.ts
new file mode 100644
index 0000000..2df5c37
--- /dev/null
+++ b/src/components/parts/index.ts
@@ -0,0 +1 @@
+export * from './todo';
diff --git a/src/components/parts/todo/TodoFilter.tsx b/src/components/parts/todo/TodoFilter.tsx
new file mode 100644
index 0000000..b95cae6
--- /dev/null
+++ b/src/components/parts/todo/TodoFilter.tsx
@@ -0,0 +1,19 @@
+import React from 'react';
+import {ButtonGroup} from 'react-native-elements';
+
+export enum FilterType {
+  ALL = 0,
+  INCOMPLETE = 1,
+  COMPLETED = 2,
+}
+
+interface Props {
+  filterType: FilterType;
+  setFilterType: (filter: FilterType) => void;
+}
+
+export const TodoFilter: React.FC<Props> = ({filterType, setFilterType}) => {
+  const buttons = ['全て', '未完了のみ', '完了のみ'];
+
+  return <ButtonGroup onPress={setFilterType} selectedIndex={filterType} buttons={buttons} />;
+};
diff --git a/src/components/parts/todo/TodoItem.tsx b/src/components/parts/todo/TodoItem.tsx
new file mode 100644
index 0000000..86a7aa7
--- /dev/null
+++ b/src/components/parts/todo/TodoItem.tsx
@@ -0,0 +1,43 @@
+import React, {useCallback} from 'react';
+import {StyleSheet, View} from 'react-native';
+import {CheckBox} from 'react-native-elements';
+
+interface Props {
+  id: number;
+  text: string;
+  completed: boolean;
+  toggleTodoCompletion: (id: number) => void;
+}
+
+export const TodoItem: React.FC<Props> = ({id, text, completed, toggleTodoCompletion}) => {
+  const onToggle = useCallback(() => toggleTodoCompletion(id), [id, toggleTodoCompletion]);
+
+  return (
+    <View style={styles.item}>
+      <View style={styles.todo}>
+        <CheckBox title={text} checked={completed} containerStyle={styles.checkbox} onPress={onToggle} />
+      </View>
+    </View>
+  );
+};
+
+const styles = StyleSheet.create({
+  item: {
+    flex: 1,
+    flexDirection: 'row',
+    alignItems: 'center',
+    borderStyle: 'solid',
+    borderWidth: 1,
+    borderColor: 'silver',
+    borderRadius: 10,
+    marginBottom: 10,
+  },
+  todo: {
+    flexGrow: 1,
+    flexShrink: 1,
+  },
+  checkbox: {
+    backgroundColor: 'transparent',
+    borderWidth: 0,
+  },
+});
diff --git a/src/components/parts/todo/TodoList.tsx b/src/components/parts/todo/TodoList.tsx
new file mode 100644
index 0000000..9cf973f
--- /dev/null
+++ b/src/components/parts/todo/TodoList.tsx
@@ -0,0 +1,38 @@
+import React from 'react';
+import {FlatList, StyleProp, StyleSheet, ViewStyle} from 'react-native';
+import {Todo} from 'services';
+
+import {TodoItem} from './TodoItem';
+
+interface Props {
+  todos: Todo[];
+  contentContainerStyle?: StyleProp<ViewStyle>;
+  toggleTodoCompletion: (id: number) => void;
+  removeTodo: (id: number) => void;
+}
+
+export const TodoList: React.FC<Props> = ({todos, contentContainerStyle, toggleTodoCompletion, removeTodo}) => {
+  return (
+    <FlatList
+      style={styles.list}
+      contentContainerStyle={contentContainerStyle}
+      data={todos}
+      renderItem={({item: todo}) => (
+        <TodoItem
+          key={todo.id}
+          id={todo.id}
+          text={todo.text}
+          completed={todo.completed}
+          toggleTodoCompletion={toggleTodoCompletion}
+        />
+      )}
+      keyExtractor={todo => String(todo.id)}
+    />
+  );
+};
+
+const styles = StyleSheet.create({
+  list: {
+    flex: 1,
+  },
+});
diff --git a/src/components/parts/todo/index.ts b/src/components/parts/todo/index.ts
new file mode 100644
index 0000000..232d971
--- /dev/null
+++ b/src/components/parts/todo/index.ts
@@ -0,0 +1,3 @@
+export * from './TodoFilter';
+export * from './TodoList';
+export * from './TodoItem';
diff --git a/src/screens/todo/TodoBoard.tsx b/src/screens/todo/TodoBoard.tsx
index 04143f1..de0c824 100644
--- a/src/screens/todo/TodoBoard.tsx
+++ b/src/screens/todo/TodoBoard.tsx
@@ -1,15 +1,83 @@
 import {useNavigation} from '@react-navigation/native';
-import React from 'react';
-import {StyleSheet, View} from 'react-native';
-import {Text, Button} from 'react-native-elements';
+import {FilterType, TodoFilter, TodoList} from 'components/parts';
+import React, {useContext, useEffect, useState} from 'react';
+import {Alert, StyleSheet, View} from 'react-native';
+import {Icon, ThemeContext} from 'react-native-elements';
+import {Todo, TodoService} from 'services';
+
+type ShowFilter = {
+  [K in FilterType]: (todo: Todo) => boolean;
+};
+
+const showFilter: ShowFilter = {
+  [FilterType.ALL]: () => true,
+  [FilterType.INCOMPLETE]: todo => !todo.completed,
+  [FilterType.COMPLETED]: todo => todo.completed,
+};

 export const TodoBoard: React.FC = () => {
   const navigation = useNavigation();
+  const {theme} = useContext(ThemeContext);
+  const [todos, setTodos] = useState<Todo[]>([]);
+  const [filterType, setFilterType] = useState<FilterType>(FilterType.ALL);
+
+  useEffect(() => {
+    let isActive = true;
+
+    TodoService.getTodos()
+      .then(response => {
+        if (isActive) {
+          setTodos(response);
+        }
+      })
+      .catch(() => {});
+
+    return () => {
+      isActive = false;
+    };
+  }, []);
+
+  const toggleTodoCompletion = (id: number) => {
+    const target = todos.find(todo => todo.id === id);
+    if (!target) {
+      return;
+    }
+    TodoService.putTodo(id, !target.completed)
+      .then(returnedTodo =>
+        setTodos(prevTodos => {
+          return prevTodos.map(todo => (todo.id === id ? returnedTodo : todo));
+        }),
+      )
+      .catch(() => {});
+  };
+
+  const removeTodo = (id: number) => {
+    Alert.alert('未実装です');
+  };
+
+  const showTodos = todos.filter(showFilter[filterType]);

   return (
-    <View style={styles.container}>
-      <Text h1>Todo</Text>
-      <Button onPress={() => navigation.navigate('TodoForm')} title="ToDo登録" />
+    <View style={styles.container} testID="screen/main/home">
+      <TodoFilter filterType={filterType} setFilterType={setFilterType} />
+      <TodoList
+        todos={showTodos}
+        contentContainerStyle={styles.todoListContainer}
+        toggleTodoCompletion={toggleTodoCompletion}
+        removeTodo={removeTodo}
+      />
+      <Icon
+        name="plus"
+        type="font-awesome-5"
+        color={theme.colors?.primary}
+        raised
+        reverse
+        size={30}
+        containerStyle={styles.iconContainerStyle}
+        onPress={() => {
+          navigation.navigate('TodoForm');
+        }}
+      />
     </View>
   );
 };
@@ -17,7 +85,15 @@ export const TodoBoard: React.FC = () => {
 const styles = StyleSheet.create({
   container: {
     flex: 1,
-    alignItems: 'center',
-    justifyContent: 'center',
+  },
+  todoListContainer: {
+    paddingLeft: 20,
+    paddingRight: 20,
+    paddingBottom: 80,
+  },
+  iconContainerStyle: {
+    position: 'absolute',
+    bottom: 10,
+    right: 10,
   },
 });
diff --git a/src/services/TodoService.tsx b/src/services/TodoService.tsx
new file mode 100644
index 0000000..2115292
--- /dev/null
+++ b/src/services/TodoService.tsx
@@ -0,0 +1,80 @@
+export type Todo = {
+  id: number;
+  text: string;
+  completed: boolean;
+};
+
+const todos: Todo[] = [
+  {
+    id: 0,
+    text: '洗濯物をたたむ',
+    completed: false,
+  },
+  {
+    id: 1,
+    text: '食器を洗う',
+    completed: false,
+  },
+  {
+    id: 2,
+    text: 'ゴミを出す',
+    completed: false,
+  },
+  {
+    id: 3,
+    text: '風呂掃除',
+    completed: false,
+  },
+  {
+    id: 4,
+    text: 'パンを買いに行く',
+    completed: false,
+  },
+  {
+    id: 5,
+    text: '電球をかえる',
+    completed: false,
+  },
+  {
+    id: 6,
+    text: '塾の送り迎え',
+    completed: false,
+  },
+  {
+    id: 7,
+    text: 'ご飯を炊く',
+    completed: false,
+  },
+];
+let id = 7;
+
+const getTodos = async () => {
+  // 新しい配列オブジェクトとして返却する
+  return Promise.resolve([...todos]);
+};
+
+const postTodo = async (text: string) => {
+  id++;
+  const todo: Todo = {
+    id,
+    text,
+    completed: false,
+  };
+  todos.push(todo);
+  return Promise.resolve(todo);
+};
+
+const putTodo = async (id: number, completed: boolean) => {
+  const target = todos.find(todo => todo.id === id);
+  if (!target) {
+    return Promise.reject(new Error('not found'));
+  }
+  target.completed = completed;
+  return Promise.resolve(target);
+};
+
+export const TodoService = {
+  getTodos,
+  postTodo,
+  putTodo,
+};
diff --git a/src/services/index.ts b/src/services/index.ts
index af1ad50..3e40d75 100644
--- a/src/services/index.ts
+++ b/src/services/index.ts
@@ -1 +1,2 @@
 export * from './AuthService';
+export * from './TodoService';
